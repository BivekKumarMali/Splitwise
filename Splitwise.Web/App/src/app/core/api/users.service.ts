/**
 * Splitwise
 * API Design for Splitwise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bivekkumar@promactinfo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient, HttpHeaders, HttpParams,
  HttpResponse, HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from './setup/encoder';

import { Observable } from 'rxjs';

import { Friend } from '../../model/friend';
import { FriendDTO } from '../../model/friendDTO';
import { Login } from '../../model/login';
import { User } from '../../model/user';

import { BASE_PATH, COLLECTION_FORMATS } from './setup/variables';
import { Configuration } from './setup/configuration';



@Injectable({
  providedIn: 'root'
})
export class UsersService {

  protected basePath = 'https://localhost:5001';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   * Add Friends
   *
   * @param friends
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addFriend(friends: Friend, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public addFriend(friends: Friend, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public addFriend(friends: Friend, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public addFriend(friends: Friend, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (friends === null || friends === undefined) {
      throw new Error('Required parameter friends was null or undefined when calling addFriend.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<any>(`${this.basePath}/api/users/Friends`,
      friends,
      {
        withCredentials: this.configuration.withCredentials,
        headers,
        observe,
        reportProgress
      }
    );
  }

  /**
   * Edit User
   *
   * @param user
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public edit(user: User, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public edit(user: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public edit(user: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public edit(user: User, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (user === null || user === undefined) {
      throw new Error('Required parameter user was null or undefined when calling edit.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<any>(`${this.basePath}/api/users`,
      user,
      {
        withCredentials: this.configuration.withCredentials,
        headers,
        observe,
        reportProgress
      }
    );
  }

  /**
   * Get all friends
   *
   * @param userid
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFriends(userid: string, observe?: 'body', reportProgress?: boolean): Observable<Array<FriendDTO>>;
  public getFriends(userid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FriendDTO>>>;
  public getFriends(userid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FriendDTO>>>;
  public getFriends(userid: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (userid === null || userid === undefined) {
      throw new Error('Required parameter userid was null or undefined when calling getFriends.');
    }

    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (userid !== undefined && userid !== null) {
      queryParameters = queryParameters.set('userid', userid as any);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/xml',
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<FriendDTO>>(`${this.basePath}/api/users/Friends`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers,
        observe,
        reportProgress
      }
    );
  }

  /**
   * Get Recent Activity of User
   *
   * @param mail
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public ByMail(mail: string, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
  public ByMail(mail: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
  public ByMail(mail: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
  public ByMail(mail: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (mail === null || mail === undefined) {
      throw new Error('Required parameter mail was null or undefined when calling ByMail.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/xml',
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<User>>(`${this.basePath}/api/users/ByMail/${encodeURIComponent(String(mail))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers,
        observe,
        reportProgress
      }
    );
  }

  /**
   * Login User
   *
   * @param user
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public login(user: Login, observe?: 'body', reportProgress?: boolean): Observable<string>;
  public login(user: Login, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
  public login(user: Login, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
  public login(user: Login, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (user === null || user === undefined) {
      throw new Error('Required parameter user was null or undefined when calling login.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/xml',
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<string>(`${this.basePath}/api/users/login`,
      user,
      {
        withCredentials: this.configuration.withCredentials,
        headers,
        observe,
        reportProgress
      }
    );
  }

  /**
   * Register User
   *
   * @param user
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public register(user: User, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public register(user: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public register(user: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public register(user: User, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (user === null || user === undefined) {
      throw new Error('Required parameter user was null or undefined when calling register.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<any>(`${this.basePath}/api/users`,
      user,
      {
        withCredentials: this.configuration.withCredentials,
        headers,
        observe,
        reportProgress
      }
    );
  }

  /**
   * Remove Friends
   *
   * @param friends
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public removeFriend(friends: Friend, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public removeFriend(friends: Friend, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public removeFriend(friends: Friend, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public removeFriend(friends: Friend, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (friends === null || friends === undefined) {
      throw new Error('Required parameter friends was null or undefined when calling removeFriend.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.delete<any>(`${this.basePath}/api/users/Friends`,
      {
        withCredentials: this.configuration.withCredentials,
        headers,
        observe,
        reportProgress
      }
    );
  }

}
